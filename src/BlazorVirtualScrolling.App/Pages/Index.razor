@page "/"

<p>
    The <code>VirtualScroll</code> displays large lists of elements performantly by only rendering the items that fit on-screen. Loading hundreds of elements can be slow in any browser; virtual scrolling enables a performant way to simulate all items being rendered by making the height of the container element the same as the height of total number of elements to be rendered, and then only rendering the items in view. 
</p>

<h4>VirtualScroll with @Items.Count() items</h4>


<VirtualScroll style="height: 500px;" ItemType="string" Items="@Items" ItemHeight="50">
    <div>@context</div>
</VirtualScroll>

@functions
{
    public IEnumerable<string> Items = Enumerable.Range(0, 333000).Select(i => i.ToString()).ToArray();
}


<code style="white-space: pre-wrap">
    @(@"
<VirtualScroll style=""height: 500px;"" ItemType=""string"" Items=""@items"" ItemHeight=""50"">
    <div>@context</div>
</VirtualScroll>

@functions
{
    public IEnumerable<string> items = Enumerable.Range(0, 1000000).Select(i => i.ToString()).ToArray();
}")
</code>